### MetaProgrammingSystem templateworkspace.xmljunitvmwatcher*.propertiesbuild.properties# generated java classes and java source files#   manually add any custom artifacts that can't be generated from the models#   http://confluence.jetbrains.com/display/MPSD25/HowTo+--+MPS+and+Gitclasses_gensource_gensource_gen.caches# generated test code and test resultstest_gentest_gen.cachesTEST-*.xmljunit*.properties### Qt template# C++ objects and libs*.slo*.lo*.o*.a*.la*.lai*.so*.so.**.dll*.dylib# Qt-esobject_script.*.Releaseobject_script.*.Debug*_plugin_import.cpp/.qmake.cache/.qmake.stash*.pro.user*.pro.user.**.qbs.user*.qbs.user.**.mocmoc_*.cppmoc_*.hqrc_*.cppui_*.h*.qmlc*.jscMakefile**build-**.qm*.prl# Qt unit teststarget_wrapper.*# QtCreator*.autosave# QtCreator Qml*.qmlproject.user*.qmlproject.user.*# QtCreator CMakeCMakeLists.txt.user*# QtCreator 4.8< compilation databasecompile_commands.json# QtCreator local machine specific files for imported projects*creator.user**_qmlcache.qrc### VirtualEnv template# Virtualenv# http://iamzed.com/2009/05/07/a-primer-on-virtualenv/.Python[Bb]in[Ii]nclude[Ll]ib[Ll]ib64[Ll]ocal[Ss]criptspyvenv.cfg.venvpip-selfcheck.json### Backup template*.bak*.gho*.ori*.orig*.tmp### Node template# Logslogs*.lognpm-debug.log*yarn-debug.log*yarn-error.log*lerna-debug.log*# Diagnostic reports (https://nodejs.org/api/report.html)report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json# Runtime datapids*.pid*.seed*.pid.lock# Directory for instrumented libs generated by jscoverage/JSCoverlib-cov# Coverage directory used by tools like istanbulcoverage*.lcov# nyc test coverage.nyc_output# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files).grunt# Bower dependency directory (https://bower.io/)bower_components# node-waf configuration.lock-wscript# Compiled binary addons (https://nodejs.org/api/addons.html)build/Release# Dependency directoriesnode_modules/jspm_packages/# Snowpack dependency directory (https://snowpack.dev/)web_modules/# TypeScript cache*.tsbuildinfo# Optional npm cache directory.npm# Optional eslint cache.eslintcache# Microbundle cache.rpt2_cache/.rts2_cache_cjs/.rts2_cache_es/.rts2_cache_umd/# Optional REPL history.node_repl_history# Output of 'npm pack'*.tgz# Yarn Integrity file.yarn-integrity# dotenv environment variables file.env.env.test# parcel-bundler cache (https://parceljs.org/).cache.parcel-cache# Next.js build output.nextout# Nuxt.js build / generate output.nuxtdist# Gatsby files.cache/# Comment in the public line in if your project uses Gatsby and not Next.js# https://nextjs.org/blog/next-9-1#public-directory-support# public# vuepress build output.vuepress/dist# Serverless directories.serverless/# FuseBox cache.fusebox/# DynamoDB Local files.dynamodb/# TernJS port file.tern-port# Stores VSCode versions used for testing VSCode extensions.vscode-test# yarn v2.yarn/cache.yarn/unplugged.yarn/build-state.yml.yarn/install-state.gz.pnp.*### Windows template# Windows thumbnail cache filesThumbs.dbThumbs.db:encryptableehthumbs.dbehthumbs_vista.db# Dump file*.stackdump# Folder config file[Dd]esktop.ini# Recycle Bin used on file shares$RECYCLE.BIN/# Windows Installer files*.cab*.msi*.msix*.msm*.msp# Windows shortcuts*.lnk### OpenSSL template# OpenSSL-related files best not committed## Certificate Authority*.ca## Certificate*.crt## Certificate Sign Request*.csr## Certificate*.der## Key database file*.kdb## OSCP request data*.org## PKCS #12*.p12## PEM-encoded certificate data*.pem## Random number seed*.rnd## SSLeay data*.ssleay## S/MIME message*.smime### Autotools template# http://www.gnu.org/software/automakeMakefile.in/ar-lib/mdate-sh/py-compile/test-driver/ylwrap.deps/.dirstamp# http://www.gnu.org/software/autoconfautom4te.cache/autoscan.log/autoscan-*.log/aclocal.m4/compile/config.guess/config.h.in/config.log/config.status/config.sub/configure/configure.scan/depcomp/install-sh/missing/stamp-h1# https://www.gnu.org/software/libtool//ltmain.sh# http://www.gnu.org/software/texinfo/texinfo.tex# http://www.gnu.org/software/m4/m4/libtool.m4m4/ltoptions.m4m4/ltsugar.m4m4/ltversion.m4m4/lt~obsolete.m4# Generated Makefile# (meta build system like autotools,# can automatically generate from config.status script# (which is called by configure script))Makefile### JetBrains template# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839# User-specific stuff.idea/**/workspace.xml.idea/**/tasks.xml.idea/**/usage.statistics.xml.idea/**/dictionaries.idea/**/shelf# Generated files.idea/**/contentModel.xml# Sensitive or high-churn files.idea/**/dataSources/.idea/**/dataSources.ids.idea/**/dataSources.local.xml.idea/**/sqlDataSources.xml.idea/**/dynamic.xml.idea/**/uiDesigner.xml.idea/**/dbnavigator.xml# Gradle.idea/**/gradle.xml.idea/**/libraries# Gradle and Maven with auto-import# When using Gradle or Maven with auto-import, you should exclude module files,# since they will be recreated, and may cause churn.  Uncomment if using# auto-import.# .idea/artifacts# .idea/compiler.xml# .idea/jarRepositories.xml# .idea/modules.xml# .idea/*.iml# .idea/modules# *.iml# *.ipr# CMakecmake-build-*/# Mongo Explorer plugin.idea/**/mongoSettings.xml# File-based project format*.iws# IntelliJout/# mpeltonen/sbt-idea plugin.idea_modules/# JIRA pluginatlassian-ide-plugin.xml# Cursive Clojure plugin.idea/replstate.xml# Crashlytics plugin (for Android Studio and IntelliJ)com_crashlytics_export_strings.xmlcrashlytics.propertiescrashlytics-build.propertiesfabric.properties# Editor-based Rest Client.idea/httpRequests# Android studio 3.1+ serialized cache file.idea/caches/build_file_checksums.ser### Linux template*~# temporary files which can be created if a process still has a handle open of a deleted file.fuse_hidden*# KDE directory preferences.directory# Linux trash folder which might appear on any partition or disk.Trash-*# .nfs files are created when an open file is removed but is still being accessed.nfs*### Emacs template# -*- mode: gitignore; -*-\#*\#/.emacs.desktop/.emacs.desktop.lock*.elcauto-save-listtramp.\#*# Org-mode.org-id-locations*_archive# flymake-mode*_flymake.*# eshell files/eshell/history/eshell/lastdir# elpa packages/elpa/# reftex files*.rel# AUCTeX auto folder/auto/# cask packages.cask/dist/# Flycheckflycheck_*.el# server auth directory/server/# projectiles files.projectile# directory configuration.dir-locals.el# network security/network-security.data### VisualStudio template## Ignore Visual Studio temporary files, build results, and## files generated by popular Visual Studio add-ons.#### Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore# User-specific files*.rsuser*.suo*.user*.userosscache*.sln.docstates# User-specific files (MonoDevelop/Xamarin Studio)*.userprefs# Mono auto generated filesmono_crash.*# Build results[Dd]ebug/[Dd]ebugPublic/[Rr]elease/[Rr]eleases/x64/x86/[Ww][Ii][Nn]32/[Aa][Rr][Mm]/[Aa][Rr][Mm]64/bld/[Bb]in/[Oo]bj/[Ll]og/[Ll]ogs/# Visual Studio 2015/2017 cache/options directory.vs/# Uncomment if you have tasks that create the project's static files in wwwroot#wwwroot/# Visual Studio 2017 auto generated filesGenerated\ Files/# MSTest test Results[Tt]est[Rr]esult*/[Bb]uild[Ll]og.*# NUnit*.VisualState.xmlTestResult.xmlnunit-*.xml# Build Results of an ATL Project[Dd]ebugPS/[Rr]eleasePS/dlldata.c# Benchmark ResultsBenchmarkDotNet.Artifacts/# .NET Coreproject.lock.jsonproject.fragment.lock.jsonartifacts/# ASP.NET ScaffoldingScaffoldingReadMe.txt# StyleCopStyleCopReport.xml# Files built by Visual Studio*_i.c*_p.c*_h.h*.ilk*.meta*.obj*.iobj*.pch*.pdb*.ipdb*.pgc*.pgd*.rsp*.sbr*.tlb*.tli*.tlh*.tmp_proj*_wpftmp.csproj*.vspscc*.vssscc.builds*.pidb*.svclog*.scc# Chutzpah Test files_Chutzpah*# Visual C++ cache filesipch/*.aps*.ncb*.opendb*.opensdf*.sdf*.cachefile*.VC.db*.VC.VC.opendb# Visual Studio profiler*.psess*.vsp*.vspx*.sap# Visual Studio Trace Files*.e2e# TFS 2012 Local Workspace$tf/# Guidance Automation Toolkit*.gpState# ReSharper is a .NET coding add-in_ReSharper*/*.[Rr]e[Ss]harper*.DotSettings.user# TeamCity is a build add-in_TeamCity*# DotCover is a Code Coverage Tool*.dotCover# AxoCover is a Code Coverage Tool.axoCover/*!.axoCover/settings.json# Coverlet is a free, cross platform Code Coverage Toolcoverage*.jsoncoverage*.xmlcoverage*.info# Visual Studio code coverage results*.coverage*.coveragexml# NCrunch_NCrunch_*.*crunch*.local.xmlnCrunchTemp_*# MightyMoose*.mm.*AutoTest.Net/# Web workbench (sass).sass-cache/# Installshield output folder[Ee]xpress/# DocProject is a documentation generator add-inDocProject/buildhelp/DocProject/Help/*.HxTDocProject/Help/*.HxCDocProject/Help/*.hhcDocProject/Help/*.hhkDocProject/Help/*.hhpDocProject/Help/Html2DocProject/Help/html# Click-Once directorypublish/# Publish Web Output*.[Pp]ublish.xml*.azurePubxml# Note: Comment the next line if you want to checkin your web deploy settings,# but database connection strings (with potential passwords) will be unencrypted*.pubxml*.publishproj# Microsoft Azure Web App publish settings. Comment the next line if you want to# checkin your Azure Web App publish settings, but sensitive information contained# in these scripts will be unencryptedPublishScripts/# NuGet Packages*.nupkg# NuGet Symbol Packages*.snupkg# The packages folder can be ignored because of Package Restore**/[Pp]ackages/*# except build/, which is used as an MSBuild target.!**/[Pp]ackages/build/# Uncomment if necessary however generally it will be regenerated when needed#!**/[Pp]ackages/repositories.config# NuGet v3's project.json files produces more ignorable files*.nuget.props*.nuget.targets# Microsoft Azure Build Outputcsx/*.build.csdef# Microsoft Azure Emulatorecf/rcf/# Windows Store app package directories and filesAppPackages/BundleArtifacts/Package.StoreAssociation.xml_pkginfo.txt*.appx*.appxbundle*.appxupload# Visual Studio cache files# files ending in .cache can be ignored*.[Cc]ache# but keep track of directories ending in .cache!?*.[Cc]ache/# OthersClientBin/~$**.dbmdl*.dbproj.schemaview*.jfm*.pfx*.publishsettingsorleans.codegen.cs# Including strong name files can present a security risk# (https://github.com/github/gitignore/pull/2483#issue-259490424)#*.snk# Since there are multiple workflows, uncomment next line to ignore bower_components# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)#bower_components/# RIA/Silverlight projectsGenerated_Code/# Backup & report files from converting an old project file# to a newer Visual Studio version. Backup files are not needed,# because we have git ;-)_UpgradeReport_Files/Backup*/UpgradeLog*.XMLUpgradeLog*.htmServiceFabricBackup/*.rptproj.bak# SQL Server files*.mdf*.ldf*.ndf# Business Intelligence projects*.rdl.data*.bim.layout*.bim_*.settings*.rptproj.rsuser*- [Bb]ackup.rdl*- [Bb]ackup ([0-9]).rdl*- [Bb]ackup ([0-9][0-9]).rdl# Microsoft FakesFakesAssemblies/# GhostDoc plugin setting file*.GhostDoc.xml# Node.js Tools for Visual Studio.ntvs_analysis.dat# Visual Studio 6 build log*.plg# Visual Studio 6 workspace options file*.opt# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)*.vbw# Visual Studio LightSwitch build output**/*.HTMLClient/GeneratedArtifacts**/*.DesktopClient/GeneratedArtifacts**/*.DesktopClient/ModelManifest.xml**/*.Server/GeneratedArtifacts**/*.Server/ModelManifest.xml_Pvt_Extensions# Paket dependency manager.paket/paket.exepaket-files/# FAKE - F# Make.fake/# CodeRush personal settings.cr/personal# Python Tools for Visual Studio (PTVS)__pycache__/*.pyc# Cake - Uncomment if you are using it# tools/**# !tools/packages.config# Tabs Studio*.tss# Telerik's JustMock configuration file*.jmconfig# BizTalk build output*.btp.cs*.btm.cs*.odx.cs*.xsd.cs# OpenCover UI analysis resultsOpenCover/# Azure Stream Analytics local run outputASALocalRun/# MSBuild Binary and Structured Log*.binlog# NVidia Nsight GPU debugger configuration file*.nvuser# MFractors (Xamarin productivity tool) working folder.mfractor/# Local History for Visual Studio.localhistory/# BeatPulse healthcheck temp databasehealthchecksdb# Backup folder for Package Reference Convert tool in Visual Studio 2017MigrationBackup/# Ionide (cross platform F# VS Code tools) working folder.ionide/# Fody - auto-generated XML schemaFodyWeavers.xsd### Objective-C template# Xcode## gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore## User settingsxcuserdata/## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)*.xcscmblueprint*.xccheckout## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)build/DerivedData/*.moved-aside*.pbxuser!default.pbxuser*.mode1v3!default.mode1v3*.mode2v3!default.mode2v3*.perspectivev3!default.perspectivev3## Obj-C/Swift specific*.hmap## App packaging*.ipa*.dSYM.zip*.dSYM# CocoaPods## We recommend against adding the Pods directory to your .gitignore. However# you should judge for yourself, the pros and cons are mentioned at:# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control## Pods/## Add this line if you want to avoid checking in source code from the Xcode workspace# *.xcworkspace# Carthage## Add this line if you want to avoid checking in source code from Carthage dependencies.# Carthage/CheckoutsCarthage/Build/# fastlane## It is recommended to not store the screenshots in the git repo.# Instead, use fastlane to re-generate the screenshots whenever they are needed.# For more information about the recommended setup visit:# https://docs.fastlane.tools/best-practices/source-control/#source-controlfastlane/report.xmlfastlane/Preview.htmlfastlane/screenshots/**/*.pngfastlane/test_output# Code Injection## After new code Injection tools there's a generated folder /iOSInjectionProject# https://github.com/johnno1962/injectionforxcodeiOSInjectionProject/### Lua template# Compiled Lua sourcesluac.out# luarocks build files*.src.rock*.zip*.tar.gz# Object files*.os*.ko*.elf# Precompiled Headers*.gch# Libraries*.lib*.def*.exp# Shared objects (inc. Windows DLLs)# Executables*.exe*.out*.app*.i*86*.x86_64*.hex### ArchLinuxPackages template*.tar*.tar.**.jar*.log.**.sigpkg/src/### AppEngine template# Google App Engine generated folderappengine-generated/### Archives template# It's better to unpack these files and commit the raw source because# git has its own built in compression methods.*.7z*.rar*.gz*.gzip*.bzip*.bzip2*.bz2*.xz*.lzma*.xar# Packing-only formats*.iso# Package management formats*.dmg*.xpi*.gem*.egg*.deb*.rpm*.txz### JupyterNotebooks template# gitignore template for Jupyter Notebooks# website: http://jupyter.org/.ipynb_checkpoints*/.ipynb_checkpoints/*# IPythonprofile_default/ipython_config.py# Remove previous ipynb_checkpoints#   git rm -r .ipynb_checkpoints/### macOS template# General.DS_Store.AppleDouble.LSOverride# Icon must end with two \rIcon# Thumbnails._*# Files that might appear in the root of a volume.DocumentRevisions-V100.fseventsd.Spotlight-V100.TemporaryItems.Trashes.VolumeIcon.icns.com.apple.timemachine.donotpresent# Directories potentially created on remote AFP share.AppleDB.AppleDesktopNetwork Trash FolderTemporary Items.apdisk### Python template# Byte-compiled / optimized / DLL files*.py[cod]*$py.class# C extensions# Distribution / packagingdevelop-eggs/downloads/eggs/.eggs/lib/lib64/parts/sdist/var/wheels/share/python-wheels/*.egg-info/.installed.cfgMANIFEST# PyInstaller#  Usually these files are written by a python script from a template#  before PyInstaller builds the exe, so as to inject date/other infos into it.*.manifest*.spec# Installer logspip-log.txtpip-delete-this-directory.txt# Unit test / coverage reportshtmlcov/.tox/.nox/.coverage.coverage.*nosetests.xmlcoverage.xml*.cover*.py,cover.hypothesis/.pytest_cache/cover/# Translations*.mo*.pot# Django stuff:local_settings.pydb.sqlite3db.sqlite3-journal# Flask stuff:instance/.webassets-cache# Scrapy stuff:.scrapy# Sphinx documentationdocs/_build/# PyBuilder.pybuilder/target/# Jupyter Notebook# IPython# pyenv#   For a library or package, you might want to ignore these files since the code is#   intended to run in multiple environments; otherwise, check them in:# .python-version# pipenv#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.#   However, in case of collaboration, if having platform-specific dependencies or dependencies#   having no cross-platform support, pipenv may install dependencies that don't work, or not#   install all needed dependencies.#Pipfile.lock# PEP 582; used by e.g. github.com/David-OConnor/pyflow__pypackages__/# Celery stuffcelerybeat-schedulecelerybeat.pid# SageMath parsed files*.sage.py# Environmentsenv/venv/ENV/env.bak/venv.bak/# Spyder project settings.spyderproject.spyproject# Rope project settings.ropeproject# mkdocs documentation/site# mypy.mypy_cache/.dmypy.jsondmypy.json# Pyre type checker.pyre/# pytype static type analyzer.pytype/# Cython debug symbolscython_debug/